{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/bug-reproducers-in-open-source/","result":{"data":{"asciidoc":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;ve worked in open source for over 15 years.\nDuring that time I&#8217;ve seen a lot of issue reports, both as a user and as a maintainer.\nThe experience of working and contributing to open source projects as a maintainer\nis invaluable.\nBeing a maintainer for an open source project is often a thankless job,\nbut it does provide insight into being a good open source citizen when raising\nissues with the projects you use.</p>\n</div>\n<div class=\"paragraph\">\n<p>Recently I had an experience of investigating and reporting a bug\nI came across with the <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation\" target=\"blank\">OpenTelemetry Java Instrumentation</a> project.\nHere I explain my process from finding the initial problem,\ninvestigating the root issue,\nand finally creating a bug reproducer to help the maintainers fix the issue.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_problem\">The Problem</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At <a href=\"https://www.lumigo.io\" target=\"blank\">Lumigo</a>,\nwe extend the upstream <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation\" target=\"blank\">OpenTelemetry Java Instrumentation</a>\nwith additional functionality.\nTo package the additions,\nwe have a <a href=\"https://github.com/lumigo-io/opentelemetry-java-distro\" target=\"blank\">custom distribution</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>While testing the distribution I came across a particularly odd situation where an application\nshould have been responding with a <em>403</em> http status code,\nas the user is unauthorized.\nHowever, the application responded with a <em>406</em> status code.\nI spent some time reviewing our custom extensions to see if anything jumped out as being a likely culprit.\nNo such luck.</p>\n</div>\n<div class=\"paragraph\">\n<p>Where the error occurred is not a simple or small piece of code.\nTo help narrow down the issue,\nI decided to create a small reproducer to help isolate the problem as much as possible.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_reproducer\">Creating a Reproducer</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A reproducer should be the smallest piece of code to demonstrate a specific issue.\nGranted, it can be challenging to narrow down application code when you&#8217;re not sure of the origin.\nAnd there are times where it is impossible to create a small reproducer without recreating the original application in full.</p>\n</div>\n<div class=\"paragraph\">\n<p>Thankfully in this case, I had some clues as to the problem.\nWhen the <em>406</em> status code is returned, there is an exception raised as well.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">org.springframework.web.HttpMediaTypeNotAcceptableException:\n  Could not find acceptable representation</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As the error occurs when using Spring Boot, Spring Security, and a REST endpoint,\nI added the following dependencies in my <code>pom.xml</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As we want custom security for the endpoint, we exclude the auto configuration for security:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })\n@EnableAutoConfiguration\npublic class SampleActuatorApplication {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SampleActuatorApplication.class, args);\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To force all requests to the endpoint to be authenticated,\nwe add the following security configuration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n  @Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp\n\t\t\t.authorizeRequests()\n\t\t\t.antMatchers(\"/report/**\").authenticated();\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And lastly, the REST controller:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping\npublic class SampleController {\n\n  @GetMapping(produces = \"application/pdf\", path = {\"/report/{id}\"})\n  public ResponseEntity&lt;byte []&gt; getReport(\n      @AuthenticationPrincipal final User user,\n      @NotNull @PathVariable String id) {\n    return ResponseEntity\n            .status(HttpStatus.OK)\n            .header(\"Content-Type\", \"application/pdf\")\n            .body(\"Here is my PDF\".getBytes());\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The key point to note with the reproducer is the endpoint produces a result with the media type of <em>application/pdf</em>.\nWe will see shortly why this is important.</p>\n</div>\n<div class=\"paragraph\">\n<p>Reproducers are a great way for a developer to isolate a problem they&#8217;re investigating,\nand critical for open source maintainers to recreate a problem quickly.\nQuick reproduction of a problem goes a long way to getting a problem fixed.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nThe reproducer for this problem is available <a href=\"https://github.com/kenfinnigan/otel-spring-reproducer/tree/main\" target=\"blank\">here</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_investigating_the_cause\">Investigating the Cause</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With the reproducer in hand,\nI could then hit the REST endpoint with <em>curl</em> and step debug through the code.\nNot just stepping through the code in the reproducer,\nbut also the code of Spring itself,\nand the <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation\" target=\"blank\">OpenTelemetry Java Instrumentation</a> code.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unfortunately,\nthe <a href=\"https://bytebuddy.net/#/\" target=\"blank\">ByteBuddy</a> instrumentation advice can&#8217;t be stepped through,\nbecause it gets inlined with the code it instruments.\nIn this particular situation though,\nthere were instrumentation helper classes I could debug through to help me understand what was happening.</p>\n</div>\n<div class=\"paragraph\">\n<p>Stepping through the Spring Framework code handling the <em>403</em> error,\nI noticed it was trying to convert the JSON error response into the <em>application/pdf</em> media type.\nOn initially seeing this,\nit didn&#8217;t make any sense as to why or how this was happening.\nThe REST endpoint was defined to produce a pdf, but why was it doing the same for the error?!</p>\n</div>\n<div class=\"paragraph\">\n<p>It took a few runs through debugging each step to eventually notice\n<a href=\"https://github.com/spring-projects/spring-framework/blob/v5.1.20.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java#L112\" target=\"blank\">RequestMappingInfoHandlerMapping.handleMatch()</a>\nwas setting the <code>PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE</code> request attribute to be <em>application/pdf</em>.\nWhich is used later to convert the JSON error response,\nresulting in the <code>HttpMediaTypeNotAcceptableException</code> being thrown,\ncausing the <em>406</em> status code to be returned.</p>\n</div>\n<div class=\"paragraph\">\n<p>But where is the attribute being set?</p>\n</div>\n<div class=\"paragraph\">\n<p>Further debugging runs revealed it was a result of\n<a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/v1.32.1/instrumentation/spring/spring-webmvc/spring-webmvc-3.1/javaagent/src/main/java/org/springframework/web/servlet/v3_1/OpenTelemetryHandlerMappingFilter.java#L104\" target=\"blank\">OpenTelemetryHandlerMappingFilter.findMapping()</a>\ncalling <code>mapping.getHandler()</code>.\nDeep in the call stack it called <code>RequestMappingInfoHandlerMapping.handleMatch()</code>,\nsetting the <code>PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE</code> request attribute.</p>\n</div>\n<div class=\"paragraph\">\n<p>Wondering why this code was necessary,\nI came across <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/v1.32.1/instrumentation/spring/spring-webmvc/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webmvc/v3_1/SpringWebMvcServerSpanNaming.java#L18\" target=\"blank\">SpringWebMvcServerSpanNaming</a>,\nwhich uses the <code>BEST_MATCHING_PATTERN_ATTRIBUTE</code> request attribute to name the span.\n<code>BEST_MATCHING_PATTERN_ATTRIBUTE</code> is also set by <code>RequestMappingInfoHandlerMapping.handleMatch()</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_submitting_the_issue\">Submitting the Issue</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now understanding the sequence of code paths leading to the problem,\nit was time to document the findings and create a bug report.</p>\n</div>\n<div class=\"paragraph\">\n<p>Creating the <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/10379\" target=\"blank\">issue</a>,\nI added all the information I&#8217;d collected while investigating the problem,\nas I wanted to provide the maintainers with as much information as possible.\nI included the reproducer,\nwhat I&#8217;d seen while debugging,\nand what I believed the root cause to be.</p>\n</div>\n<div class=\"paragraph\">\n<p>When creating issues for open source projects,\nit&#8217;s always better to err on the side of too much information than too little.\nMaintainers will appreciate the additional details and context you provide,\nas it will usually help them to understand the problem in greater detail.\nThis is especially true if what you&#8217;ve found would be considered an edge case.\nWhen maintainers understand a problem,\nit makes resolving it a lot easier.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_worldwide_contributors\">Worldwide Contributors</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I created the issue as my day was ending on a Thursday.\nMy intention was to begin investigating possible resolutions to the issue the following day,\nas on the issue I said I was happy to help with a fix.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, when I began work the next day,\nmy GitHub notifications popped with a pull request from one of the maintainers with a fix!\nI was surprised and impressed by the quick turnaround,\nas I had not realistically expected any movement on the issue until the following week.</p>\n</div>\n<div class=\"paragraph\">\n<p>Having worked on remote teams for nearly 15 years,\nthis experience highlights the advantages of remote and distributed teams across time zones.\nAlthough I had finished for the day,\na maintainer in a different time zone was able to pick up the issue and work on a fix.\nWith sufficient information and a reproducer,\nthere was no need for a maintainer to ask questions,\nseek clarification,\nor request additional information from me.\nThey were able to replicate the issue and work on a fix without any further input from me.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_importance_of_reproducers\">Importance of Reproducers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This experience with the maintainers of <a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation\" target=\"blank\">OpenTelemetry Java Instrumentation</a>\nhighlighted to me the importance of sufficient details on an issue,\nbut also providing a small reproducer.\nHaving a reproducer enables maintainers to jump into working on a fix without needing to spend time trying to replicate the problem.\nThis is of critical importance for edge cases which are difficult to replicate.</p>\n</div>\n<div class=\"paragraph\">\n<p>I also believe the issue would not have been resolved as quickly as it was\nwithout a reproducer and detailed information on what I found.\nAnything we, as users, can do to help maintainers understand and replicate an issue\nsaves them time and effort in resolving it.\nMaintainers of open source projects often have the thankless task of prioritizing\nand resolving many issues at once.\nAnything we can do to reduce their time spent resolving issues is a good thing.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we can&#8217;t take the time to try and understand the problem we&#8217;re experiencing,\nand reproduce it in a small piece of code.\nHow can we expect maintainers to expend any effort in resolving a problem for us?</p>\n</div>\n<div class=\"paragraph\">\n<p>If there&#8217;s one thing I hope you take away from this post,\nit&#8217;s the importance of providing a small reproducer when reporting an issue.\nIt&#8217;s a small thing that can make a big difference in getting a problem resolved quickly.\nWe, as users of open source,\nneed to understand maintainers are often working on issues in their spare time.\nAnything we can do to help them is a good thing,\nand appreciated by maintainers.</p>\n</div>\n</div>\n</div>","document":{"title":"Bug Reproducers in Open Source"},"fields":{"slug":"/blog/bug-reproducers-in-open-source/"},"pageAttributes":{"title":null,"description":null,"date":"February 19, 2024"}}},"pageContext":{"slug":"/blog/bug-reproducers-in-open-source/"}},"staticQueryHashes":["1000148989","19992949","764694655","78439061"],"slicesMap":{}}